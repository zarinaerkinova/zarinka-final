import React, { useState, useEffect, useCallback, useRef } from 'react';
import { toast } from 'react-hot-toast';
import { useTranslation } from 'react-i18next';
import { 
    validatePhone, 
    formatUzbekPhone, 
    getPhoneInfo, 
    maskPhoneNumber,
    sendVerificationSMS,
    verifySMSCode,
    validatePhoneWithAPI
} from '../../utils/phoneValidation';
import './PhoneVerification.scss';

const PhoneVerification = ({ 
    onVerificationComplete, 
    onPhoneChange, 
    initialPhone = '', 
    required = true,
    showInfo = false,
    validationType = 'flexible',
    className = ''
}) => {
    const { t } = useTranslation();
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const [phone, setPhone] = useState(initialPhone);
    const [isVerified, setIsVerified] = useState(false);
    const [isVerifying, setIsVerifying] = useState(false);
    const [validationResult, setValidationResult] = useState(null);
    const [phoneInfo, setPhoneInfo] = useState(null);
    const [isLoadingInfo, setIsLoadingInfo] = useState(false);
    
    // SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    const [showSmsVerification, setShowSmsVerification] = useState(false);
    const [smsCode, setSmsCode] = useState('');
    const [systemCode, setSystemCode] = useState('');
    const [countdown, setCountdown] = useState(0);
    const [canResend, setCanResend] = useState(true);

    // Refs –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
    const lastNotifiedPhone = useRef('');
    const lastNotifiedResult = useRef(null);

    const validatePhoneNumber = useCallback(async (phoneValue) => {
        if (!phoneValue) {
            setValidationResult(null);
            setPhoneInfo(null);
            return;
        }

        // –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        const result = validatePhone(phoneValue, validationType);
        setValidationResult(result);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω
        if (result.isValid && showInfo) {
            setIsLoadingInfo(true);
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                const apiResult = await validatePhoneWithAPI(phoneValue, true);
                if (apiResult.success) {
                    const info = {
                        isValid: apiResult.data.isValid,
                        exists: apiResult.data.apiVerification?.is_valid,
                        carrier: apiResult.data.apiVerification?.carrier || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        lineType: apiResult.data.apiVerification?.line_type || 'mobile',
                        country: apiResult.data.apiVerification?.country_code || 'UZ',
                        region: apiResult.data.apiVerification?.location || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        riskScore: apiResult.data.fraudCheck?.riskScore || 0,
                        isRoaming: false,
                        recommendation: apiResult.data.recommendation
                    };
                    setPhoneInfo(info);
                } else {
                    // Fallback –∫ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    const basicInfo = await getPhoneInfo(phoneValue);
                    setPhoneInfo(basicInfo);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–º–µ—Ä–µ:', error);
                const basicInfo = await getPhoneInfo(phoneValue);
                setPhoneInfo(basicInfo);
            } finally {
                setIsLoadingInfo(false);
            }
        }
    }, [validationType, showInfo]);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ
    useEffect(() => {
        if (onPhoneChange && 
            (phone !== lastNotifiedPhone.current || 
             JSON.stringify(validationResult) !== JSON.stringify(lastNotifiedResult.current))) {
            
            lastNotifiedPhone.current = phone;
            lastNotifiedResult.current = validationResult;
            onPhoneChange(phone, validationResult);
        }
    }, [phone, validationResult, onPhoneChange]);

    useEffect(() => {
        if (phone) {
            validatePhoneNumber(phone);
        }
    }, [phone, validatePhoneNumber]);

    const handlePhoneChange = (e) => {
        const value = e.target.value;
        setPhone(value);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞
        if (isVerified) {
            setIsVerified(false);
            setShowSmsVerification(false);
        }
    };

    const sendSMSVerification = async () => {
        if (!validationResult?.isValid) {
            toast.error('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
            return;
        }

        setIsVerifying(true);
        
        try {
            const result = await sendVerificationSMS(phone);
            
            if (result.success) {
                setShowSmsVerification(true);
                startResendTimer();
                
                toast.success(result.message || `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${maskPhoneNumber(phone)}`);
                
                // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (result.data?.demoCode) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ —Å—Ä–∞–∑—É –∏ –¥–æ–ª–≥–æ
                    toast.success(`üîê –ö–û–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø: ${result.data.demoCode}`, { 
                        duration: 15000,
                        style: {
                            fontSize: '18px',
                            fontWeight: 'bold',
                            background: '#4ade80',
                            color: 'white'
                        }
                    });
                    setSystemCode(result.data.demoCode);
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ alert –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    setTimeout(() => {
                        alert(`–î–µ–º–æ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${result.data.demoCode}\n\n–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.`);
                    }, 1000);
                }
            } else {
                toast.error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
            toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } finally {
            setIsVerifying(false);
        }
    };

    const startResendTimer = () => {
        setCanResend(false);
        setCountdown(60);

        const timer = setInterval(() => {
            setCountdown(prev => {
                if (prev <= 1) {
                    setCanResend(true);
                    clearInterval(timer);
                    return 0;
                }
                return prev - 1;
            });
        }, 1000);
    };

    const verifyCode = async () => {
        if (smsCode.length !== 6) {
            toast.error('–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥');
            return;
        }

        try {
            const result = await verifySMSCode(phone, smsCode);
            
            if (result.success) {
                setIsVerified(true);
                setShowSmsVerification(false);
                toast.success(result.message || '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
                
                if (onVerificationComplete) {
                    onVerificationComplete(phone, true);
                }
            } else {
                toast.error(result.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (result.data?.attemptsRemaining !== undefined) {
                    toast.error(`–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${result.data.attemptsRemaining}`);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
            toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞');
        }
    };

    const resendCode = async () => {
        if (!canResend) return;
        
        setSmsCode('');
        await sendSMSVerification();
    };

    const renderValidationErrors = () => {
        if (!validationResult || validationResult.isValid) return null;

        return (
            <div className="validation-errors">
                {validationResult.errors.map((error, index) => (
                    <div key={index} className="error-message">
                        ‚ö†Ô∏è {error}
                    </div>
                ))}
                {validationResult.warnings?.map((warning, index) => (
                    <div key={index} className="warning-message">
                        ‚ö° {warning}
                    </div>
                ))}
            </div>
        );
    };

    const renderPhoneInfo = () => {
        if (!showInfo || !phoneInfo || isLoadingInfo) return null;

        return (
            <div className="phone-info">
                <div className="info-header">üìû –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ</div>
                <div className="info-grid">
                    <div className="info-item">
                        <span className="info-label">–û–ø–µ—Ä–∞—Ç–æ—Ä:</span>
                        <span className="info-value">{phoneInfo.carrier}</span>
                    </div>
                    <div className="info-item">
                        <span className="info-label">–¢–∏–ø –ª–∏–Ω–∏–∏:</span>
                        <span className="info-value">{phoneInfo.lineType}</span>
                    </div>
                    <div className="info-item">
                        <span className="info-label">–†–µ–≥–∏–æ–Ω:</span>
                        <span className="info-value">{phoneInfo.region}</span>
                    </div>
                    <div className="info-item">
                        <span className="info-label">–°—É—â–µ—Å—Ç–≤—É–µ—Ç:</span>
                        <span className={`info-value ${phoneInfo.exists ? 'valid' : 'invalid'}`}>
                            {phoneInfo.exists ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}
                        </span>
                    </div>
                    {phoneInfo.riskScore > 50 && (
                        <div className="info-item warning">
                            <span className="info-label">–†–∏—Å–∫:</span>
                            <span className="info-value">‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π ({phoneInfo.riskScore}%)</span>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    const renderSMSVerification = () => {
        if (!showSmsVerification) return null;

        return (
            <div className="sms-verification">
                <div className="verification-header">
                    <h4>üì± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞</h4>
                    <p>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ {maskPhoneNumber(phone)}</p>
                </div>
                
                <div className="code-input-container">
                    <input
                        type="text"
                        className="code-input"
                        placeholder="000000"
                        value={smsCode}
                        onChange={(e) => setSmsCode(e.target.value.replace(/\D/g, '').slice(0, 6))}
                        maxLength={6}
                    />
                    <button
                        type="button"
                        className="verify-code-btn"
                        onClick={verifyCode}
                        disabled={smsCode.length !== 6}
                    >
                        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                    </button>
                </div>

                <div className="resend-container">
                    {canResend ? (
                        <button
                            type="button"
                            className="resend-btn"
                            onClick={resendCode}
                        >
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                        </button>
                    ) : (
                        <span className="countdown">
                            –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ {countdown} —Å–µ–∫
                        </span>
                    )}
                </div>
            </div>
        );
    };

    return (
        <div className={`phone-verification ${className}`}>
            <div className="phone-input-container">
                <label className="phone-label">
                    –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {required && <span className="required">*</span>}
                </label>
                
                <div className="input-group">
                    <input
                        type="tel"
                        className={`phone-input ${validationResult && !validationResult.isValid ? 'invalid' : ''} ${isVerified ? 'verified' : ''}`}
                        placeholder="+998 (90) 111-66-59"
                        value={phone}
                        onChange={handlePhoneChange}
                        disabled={isVerified}
                    />
                    
                    {validationResult?.isValid && !isVerified && (
                        <button
                            type="button"
                            className="verify-btn"
                            onClick={sendSMSVerification}
                            disabled={isVerifying}
                        >
                            {isVerifying ? '‚è≥' : 'üì±'} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                        </button>
                    )}
                    
                    {isVerified && (
                        <div className="verification-status verified">
                            ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
                        </div>
                    )}
                </div>

                {isLoadingInfo && (
                    <div className="loading-info">üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä...</div>
                )}
            </div>

            {renderValidationErrors()}
            {renderPhoneInfo()}
            {renderSMSVerification()}
        </div>
    );
};

export default PhoneVerification;