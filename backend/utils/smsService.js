/**
 * SMS Service - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
 */

import fetch from 'node-fetch';

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ SMS.ru (–¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
 */
export const sendSMSviaSMSRu = async (phone, code) => {
    try {
        const apiId = process.env.SMS_RU_API_ID;
        if (!apiId || apiId === 'your_sms_ru_api_id') {
            throw new Error('SMS_RU_API_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://sms.ru/');
        }

        // –û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –¥–ª—è SMS.ru
        const cleanPhone = phone.replace(/\D/g, '');
        
        const message = `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}. –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É.`;
        const url = `https://sms.ru/sms/send`;
        
        const params = new URLSearchParams({
            api_id: apiId,
            to: cleanPhone,
            msg: message,
            json: '1'
        });

        console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ SMS.ru –Ω–∞ –Ω–æ–º–µ—Ä ${phone}`);
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: params
        });

        if (!response.ok) {
            throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        console.log('SMS.ru response:', data);
        
        if (data.status === 'OK') {
            const smsInfo = data.sms && data.sms[cleanPhone];
            return {
                success: true,
                messageId: smsInfo?.sms_id || `sms_ru_${Date.now()}`,
                cost: smsInfo?.cost || 0,
                status: smsInfo?.status || 'sent',
                provider: 'sms_ru'
            };
        } else {
            throw new Error(data.status_text || `SMS.ru error: ${data.status}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ SMS.ru:', error.message);
        throw error;
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Eskiz.uz (–¥–ª—è —É–∑–±–µ–∫—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
 */
export const sendSMSviaEskizUz = async (phone, code) => {
    try {
        const login = process.env.ESKIZ_LOGIN;
        const password = process.env.ESKIZ_PASSWORD;
        
        if (!login || !password || login === 'your_eskiz_email') {
            throw new Error('ESKIZ_LOGIN –∏–ª–∏ ESKIZ_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://eskiz.uz/');
        }

        console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Eskiz.uz –Ω–∞ –Ω–æ–º–µ—Ä ${phone}`);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const authResponse = await fetch('https://notify.eskiz.uz/api/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                email: login,
                password: password
            })
        });

        if (!authResponse.ok) {
            throw new Error(`Auth failed: ${authResponse.status} ${authResponse.statusText}`);
        }

        const authData = await authResponse.json();
        if (!authData.data?.token) {
            throw new Error(`–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Eskiz.uz: ${authData.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
        const message = `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}. –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É.`;
        const cleanPhone = phone.replace('+', '');
        
        const smsResponse = await fetch('https://notify.eskiz.uz/api/message/sms/send', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${authData.data.token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                mobile_phone: cleanPhone,
                message: message,
                from: '4546' // –û–±—ã—á–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–ª—è Eskiz
            })
        });

        if (!smsResponse.ok) {
            throw new Error(`SMS send failed: ${smsResponse.status} ${smsResponse.statusText}`);
        }

        const smsData = await smsResponse.json();
        console.log('Eskiz.uz response:', smsData);
        
        if (smsData.status === 'success') {
            return {
                success: true,
                messageId: smsData.data?.id || `eskiz_${Date.now()}`,
                cost: 0.01, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è Eskiz
                status: 'sent',
                provider: 'eskiz_uz'
            };
        } else {
            throw new Error(smsData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Eskiz.uz');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ Eskiz.uz:', error.message);
        throw error;
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Twilio (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
 */
export const sendSMSviaTwilio = async (phone, code) => {
    try {
        const accountSid = process.env.TWILIO_ACCOUNT_SID;
        const authToken = process.env.TWILIO_AUTH_TOKEN;
        const fromPhone = process.env.TWILIO_PHONE_NUMBER;
        
        if (!accountSid || !authToken || !fromPhone) {
            throw new Error('Twilio credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }

        console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Twilio –Ω–∞ –Ω–æ–º–µ—Ä ${phone}`);

        const message = `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}. –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É.`;
        
        const auth = Buffer.from(`${accountSid}:${authToken}`).toString('base64');
        
        const response = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`, {
            method: 'POST',
            headers: {
                'Authorization': `Basic ${auth}`,
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
                From: fromPhone,
                To: phone,
                Body: message
            })
        });

        const data = await response.json();
        console.log('Twilio response:', data);
        
        if (response.ok && data.sid) {
            return {
                success: true,
                messageId: data.sid,
                cost: parseFloat(data.price) || 0,
                status: data.status || 'sent',
                provider: 'twilio'
            };
        } else {
            throw new Error(data.message || `Twilio error: ${data.code}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ Twilio:', error.message);
        throw error;
    }
};

/**
 * –î–µ–º–æ —Ä–µ–∂–∏–º (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
 */
export const sendSMSDemo = async (phone, code) => {
    try {
        console.log('üéØ === –î–ï–ú–û –†–ï–ñ–ò–ú SMS ===');
        console.log(`üì± –ù–æ–º–µ—Ä: ${phone}`);
        console.log(`üîê –ö–æ–¥: ${code}`);
        console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
        console.log('üì§ SMS –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∞–ª—å–Ω–æ (–¥–µ–º–æ —Ä–µ–∂–∏–º)');
        console.log('üîß –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SMS_PROVIDER –≤ .env');
        console.log('========================');
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        return {
            success: true,
            messageId: `demo_${Date.now()}`,
            cost: 0,
            status: 'demo',
            provider: 'demo',
            demo: true
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ:', error.message);
        throw error;
    }
};

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export const selectSMSProvider = (phone) => {
    const cleanPhone = phone.replace(/\D/g, '');
    
    // –£–∑–±–µ–∫—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ (–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã 998)
    if (cleanPhone.startsWith('998') || (cleanPhone.length === 9 && !cleanPhone.startsWith('7') && !cleanPhone.startsWith('8'))) {
        return 'eskiz_uz';
    }
    
    // –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ (–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã 7)
    if (cleanPhone.startsWith('7') || cleanPhone.startsWith('8') || 
        (cleanPhone.length === 10 && ['9', '4', '8'].includes(cleanPhone[0]))) {
        return 'sms_ru';
    }
    
    // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    return 'twilio';
};

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback
 */
export const sendSMSCode = async (phone, code) => {
    try {
        const configuredProvider = process.env.SMS_PROVIDER || 'demo';
        let provider = configuredProvider;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (provider === 'auto') {
            provider = selectSMSProvider(phone);
            console.log(`ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider} –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${phone}`);
        }
        
        console.log(`üì° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`);
        
        let result;
        let errors = [];
        
        switch (provider) {
            case 'sms_ru':
                try {
                    result = await sendSMSviaSMSRu(phone, code);
                } catch (error) {
                    errors.push(`SMS.ru: ${error.message}`);
                    // Fallback –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º
                    console.log('‚ö†Ô∏è SMS.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º');
                    result = await sendSMSDemo(phone, code);
                }
                break;
                
            case 'eskiz_uz':
                try {
                    result = await sendSMSviaEskizUz(phone, code);
                } catch (error) {
                    errors.push(`Eskiz.uz: ${error.message}`);
                    // Fallback –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º
                    console.log('‚ö†Ô∏è Eskiz.uz –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º');
                    result = await sendSMSDemo(phone, code);
                }
                break;
                
            case 'twilio':
                try {
                    result = await sendSMSviaTwilio(phone, code);
                } catch (error) {
                    errors.push(`Twilio: ${error.message}`);
                    // Fallback –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º
                    console.log('‚ö†Ô∏è Twilio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º');
                    result = await sendSMSDemo(phone, code);
                }
                break;
                
            case 'demo':
            default:
                result = await sendSMSDemo(phone, code);
                break;
        }
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (result.success) {
            console.log(`‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ${result.provider}`);
            console.log(`üìä ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.messageId}`);
            console.log(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result.cost} —Ä—É–±.`);
        }
        
        return {
            ...result,
            errors: errors.length > 0 ? errors : undefined
        };
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error.message);
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –¥–µ–º–æ —Ä–µ–∂–∏–º
        try {
            const demoResult = await sendSMSDemo(phone, code);
            return {
                ...demoResult,
                fallback: true,
                originalError: error.message
            };
        } catch (demoError) {
            return {
                success: false,
                error: `–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${error.message}`,
                provider: 'none'
            };
        }
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ SMS (–¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç)
 */
export const checkSMSStatus = async (messageId, provider) => {
    try {
        switch (provider) {
            case 'sms_ru':
                const apiId = process.env.SMS_RU_API_ID;
                if (!apiId) return { status: 'unknown' };
                
                const response = await fetch(`https://sms.ru/sms/status?api_id=${apiId}&sms_id=${messageId}&json=1`);
                const data = await response.json();
                
                return {
                    status: data.sms?.[messageId]?.status || 'unknown',
                    cost: data.sms?.[messageId]?.cost || 0
                };
                
            case 'demo':
                return { status: 'delivered', cost: 0 };
                
            default:
                return { status: 'unknown' };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ SMS:', error);
        return { status: 'error', error: error.message };
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 */
export const getSMSBalance = async (provider = process.env.SMS_PROVIDER) => {
    try {
        switch (provider) {
            case 'sms_ru':
                const apiId = process.env.SMS_RU_API_ID;
                if (!apiId) return { balance: 0, currency: 'RUB' };
                
                const response = await fetch(`https://sms.ru/my/balance?api_id=${apiId}&json=1`);
                const data = await response.json();
                
                return {
                    balance: data.balance || 0,
                    currency: 'RUB'
                };
                
            case 'demo':
                return { balance: 999, currency: 'DEMO' };
                
            default:
                return { balance: 0, currency: 'UNKNOWN' };
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ SMS:', error);
        return { balance: 0, currency: 'ERROR' };
    }
};